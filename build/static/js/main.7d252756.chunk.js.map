{"version":3,"sources":["customHooks.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["todoItem","status","toggleStatus","stylesData","textDecoration","className","onClick","style","getIncompleteItems","value","isCompleted","item","getItems","App","useState","todos","setTodos","input","setInput","totalItems","filter","i","length","console","log","onSubmit","e","preventDefault","handleSubmit","onChange","target","map","todo","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"qMACe,cAA2C,IAAhCA,EAA+B,EAA/BA,SAASC,EAAsB,EAAtBA,OAAOC,EAAe,EAAfA,aAClCC,EAAW,GAIf,OAHW,GAARF,IACSE,EAAW,CAACC,eAAgB,iBAGpC,6BACA,4BACA,wBAAIC,UAAU,YAAYC,QAAS,kBAAIJ,EAAa,CAACF,EAASC,KAAUM,MAAOJ,GAAaH,MCDpG,SAASQ,EAAmBC,GAC1B,OAA4B,GAArBA,EAAMC,aAAqC,IAAbD,EAAME,KAE7C,SAASC,EAASH,GAChB,MAAoB,IAAbA,EAAME,KA0CAE,MAvCf,WAAgB,IAAD,EACWC,mBAAS,CAAC,CAACH,KAAM,GAAGD,aAAY,KAD3C,mBACNK,EADM,KACAC,EADA,OAEWF,mBAAS,IAFpB,mBAENG,EAFM,KAEAC,EAFA,KAIPC,EAAaJ,EAAMK,OAAOR,GAK5BV,EAAa,SAACF,GAChB,IAAI,IAAIqB,EAAE,EAAEA,EAAEN,EAAMO,OAAOD,IACtBN,EAAMM,GAAN,MAAkBrB,EAAS,KAC5BuB,QAAQC,KAAKxB,EAAS,IACtBe,EAAMM,GAAN,aAAyBrB,EAAS,GAElCgB,EAAS,YAAID,MAMnB,OACE,yBAAKV,UAAU,OAAf,2BAC2BU,EAAMK,OAAOZ,GAAoBc,OAD5D,WAC4EH,EAAWG,OACrF,0BAAMG,SAAU,SAACC,GAAD,OApCH,SAACA,EAAEX,EAAMC,EAASC,EAAMC,GACzCQ,EAAEC,iBACFX,EAAS,GAAD,mBAAKD,GAAL,CAAW,CAACJ,KAAMM,EAAMP,aAAY,MAC5CQ,EAAS,IAiCgBU,CAAaF,EAAEX,EAAMC,EAASC,EAAMC,KACvD,2BAAOW,SAAU,SAACH,GAAD,OAAKR,EAASQ,EAAEI,OAAOrB,QAAQA,MAAOQ,IAIvD,6CAEF,sDACCE,EAAWY,KAAI,SAAAC,GAAI,OAClB,kBAAC,EAAD,CAAahC,SAAUgC,EAAKrB,KAAMV,OAAQ+B,EAAKtB,YAAaR,aAAcA,SCpC9D+B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL3B,QAAQ2B,MAAMA,EAAMC,a","file":"static/js/main.7d252756.chunk.js","sourcesContent":["import React, {useState} from 'react';\r\nexport default function ({todoItem,status,toggleStatus}) {\r\n    let stylesData={}\r\n    if(status==true){\r\n                stylesData={textDecoration: \"line-through\"}   \r\n            }\r\n    return(\r\n        <div>\r\n        <ul>\r\n        <li className=\"styleData\" onClick={()=>toggleStatus([todoItem,status])} style={stylesData}>{todoItem}</li>\r\n        </ul>\r\n    </div>  \r\n    )\r\n}\r\n        ","import React, {useState} from 'react';\nimport CustomToDos from './customHooks'\n\nconst handleSubmit=(e,todos,setTodos,input,setInput)=>{\n  e.preventDefault()\n  setTodos([...todos,{item: input,isCompleted:false}])\n  setInput(\"\")\n}\nfunction getIncompleteItems(value) {\n  return value.isCompleted == false && value.item !=\"\";\n}\nfunction getItems(value) {\n  return value.item !=\"\";\n}\n\nfunction App() {\n  const [todos,setTodos]= useState([{item: \"\",isCompleted:false}])\n  const [input,setInput]= useState(\"\")\n  \n  const totalItems = todos.filter(getItems)\n  // React.useEffect(() => {\n  //   localStorage.setItem('myValueInLocalStorage', todos);\n  // }, [todos]);\n\n  let toggleStatus=(todoItem)=>{\n    for(let i=0;i<todos.length;i++){\n      if(todos[i][\"item\"]==todoItem[0]){\n        console.log(!todoItem[1])\n        todos[i][\"isCompleted\"]=!todoItem[1]\n\n        setTodos([...todos])\n      }\n    }\n\n\n  }\n  return (\n    <div className=\"App\">\n      Total Todos Remaining : {todos.filter(getIncompleteItems).length} out of {totalItems.length}\n      <form onSubmit={(e)=>handleSubmit(e,todos,setTodos,input,setInput)}>\n        <input onChange={(e)=>setInput(e.target.value)} value={input}/>\n\n        {/* localStorage.setItem('myValueInLocalStorage', event.target.value); */}\n        \n        <button>Add Item</button>\n      </form>\n      <h3> The To Do items are: </h3>\n      {totalItems.map(todo=>(\n        <CustomToDos todoItem={todo.item} status={todo.isCompleted} toggleStatus={toggleStatus} />\n      ))}\n    </div>\n  );\n}\n\nexport default App;\n      \n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}